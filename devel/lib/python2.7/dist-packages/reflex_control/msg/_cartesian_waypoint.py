# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from reflex_control/cartesian_waypoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy

class cartesian_waypoint(genpy.Message):
  _md5sum = "ffb15808d34b1a9dcaeedf62fbc0a4dd"
  _type = "reflex_control/cartesian_waypoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Pose wp
float64 vel
duration dur
float64 tol_trans
float64 tol_angle

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['wp','vel','dur','tol_trans','tol_angle']
  _slot_types = ['geometry_msgs/Pose','float64','duration','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wp,vel,dur,tol_trans,tol_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cartesian_waypoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.wp is None:
        self.wp = geometry_msgs.msg.Pose()
      if self.vel is None:
        self.vel = 0.
      if self.dur is None:
        self.dur = genpy.Duration()
      if self.tol_trans is None:
        self.tol_trans = 0.
      if self.tol_angle is None:
        self.tol_angle = 0.
    else:
      self.wp = geometry_msgs.msg.Pose()
      self.vel = 0.
      self.dur = genpy.Duration()
      self.tol_trans = 0.
      self.tol_angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d2i2d().pack(_x.wp.position.x, _x.wp.position.y, _x.wp.position.z, _x.wp.orientation.x, _x.wp.orientation.y, _x.wp.orientation.z, _x.wp.orientation.w, _x.vel, _x.dur.secs, _x.dur.nsecs, _x.tol_trans, _x.tol_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.wp is None:
        self.wp = geometry_msgs.msg.Pose()
      if self.dur is None:
        self.dur = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.wp.position.x, _x.wp.position.y, _x.wp.position.z, _x.wp.orientation.x, _x.wp.orientation.y, _x.wp.orientation.z, _x.wp.orientation.w, _x.vel, _x.dur.secs, _x.dur.nsecs, _x.tol_trans, _x.tol_angle,) = _get_struct_8d2i2d().unpack(str[start:end])
      self.dur.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d2i2d().pack(_x.wp.position.x, _x.wp.position.y, _x.wp.position.z, _x.wp.orientation.x, _x.wp.orientation.y, _x.wp.orientation.z, _x.wp.orientation.w, _x.vel, _x.dur.secs, _x.dur.nsecs, _x.tol_trans, _x.tol_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.wp is None:
        self.wp = geometry_msgs.msg.Pose()
      if self.dur is None:
        self.dur = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.wp.position.x, _x.wp.position.y, _x.wp.position.z, _x.wp.orientation.x, _x.wp.orientation.y, _x.wp.orientation.z, _x.wp.orientation.w, _x.vel, _x.dur.secs, _x.dur.nsecs, _x.tol_trans, _x.tol_angle,) = _get_struct_8d2i2d().unpack(str[start:end])
      self.dur.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d2i2d = None
def _get_struct_8d2i2d():
    global _struct_8d2i2d
    if _struct_8d2i2d is None:
        _struct_8d2i2d = struct.Struct("<8d2i2d")
    return _struct_8d2i2d
