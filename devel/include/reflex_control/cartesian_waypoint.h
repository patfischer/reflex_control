// Generated by gencpp from file reflex_control/cartesian_waypoint.msg
// DO NOT EDIT!


#ifndef REFLEX_CONTROL_MESSAGE_CARTESIAN_WAYPOINT_H
#define REFLEX_CONTROL_MESSAGE_CARTESIAN_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace reflex_control
{
template <class ContainerAllocator>
struct cartesian_waypoint_
{
  typedef cartesian_waypoint_<ContainerAllocator> Type;

  cartesian_waypoint_()
    : wp()
    , vel(0.0)
    , dur()
    , tol_trans(0.0)
    , tol_angle(0.0)  {
    }
  cartesian_waypoint_(const ContainerAllocator& _alloc)
    : wp(_alloc)
    , vel(0.0)
    , dur()
    , tol_trans(0.0)
    , tol_angle(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _wp_type;
  _wp_type wp;

   typedef double _vel_type;
  _vel_type vel;

   typedef ros::Duration _dur_type;
  _dur_type dur;

   typedef double _tol_trans_type;
  _tol_trans_type tol_trans;

   typedef double _tol_angle_type;
  _tol_angle_type tol_angle;





  typedef boost::shared_ptr< ::reflex_control::cartesian_waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reflex_control::cartesian_waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct cartesian_waypoint_

typedef ::reflex_control::cartesian_waypoint_<std::allocator<void> > cartesian_waypoint;

typedef boost::shared_ptr< ::reflex_control::cartesian_waypoint > cartesian_waypointPtr;
typedef boost::shared_ptr< ::reflex_control::cartesian_waypoint const> cartesian_waypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reflex_control::cartesian_waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reflex_control::cartesian_waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace reflex_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'reflex_control': ['/home/fischer/reflex_control/src/reflex_control/msg', '/home/fischer/reflex_control/devel/share/reflex_control/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::reflex_control::cartesian_waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflex_control::cartesian_waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_control::cartesian_waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflex_control::cartesian_waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_control::cartesian_waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflex_control::cartesian_waypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reflex_control::cartesian_waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffb15808d34b1a9dcaeedf62fbc0a4dd";
  }

  static const char* value(const ::reflex_control::cartesian_waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffb15808d34b1a9dULL;
  static const uint64_t static_value2 = 0xcaeedf62fbc0a4ddULL;
};

template<class ContainerAllocator>
struct DataType< ::reflex_control::cartesian_waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reflex_control/cartesian_waypoint";
  }

  static const char* value(const ::reflex_control::cartesian_waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reflex_control::cartesian_waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose wp\n\
float64 vel\n\
duration dur\n\
float64 tol_trans\n\
float64 tol_angle\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::reflex_control::cartesian_waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reflex_control::cartesian_waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wp);
      stream.next(m.vel);
      stream.next(m.dur);
      stream.next(m.tol_trans);
      stream.next(m.tol_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cartesian_waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reflex_control::cartesian_waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reflex_control::cartesian_waypoint_<ContainerAllocator>& v)
  {
    s << indent << "wp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.wp);
    s << indent << "vel: ";
    Printer<double>::stream(s, indent + "  ", v.vel);
    s << indent << "dur: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.dur);
    s << indent << "tol_trans: ";
    Printer<double>::stream(s, indent + "  ", v.tol_trans);
    s << indent << "tol_angle: ";
    Printer<double>::stream(s, indent + "  ", v.tol_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFLEX_CONTROL_MESSAGE_CARTESIAN_WAYPOINT_H
